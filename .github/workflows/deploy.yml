name: Test and release

# on:
#   push:
#     tags: "*"
on:
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  checks:
    env:
      TZ: "Europe/Moscow"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: almazilaletdinov
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.1"
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: create .env file
      run: cp .github/.env .env
    # - name: Lint via ruff
    #   run: .venv/bin/ruff check src
    # - name: Lint via flake8
    #   run: .venv/bin/flake8 src
    # - name: Lint via refurb
    #   run: .venv/bin/refurb src
    # - name: Check types with mypy
    #   run: .venv/bin/mypy src
    # - name: Run e2e tests
    #   run: .venv/bin/pytest src/tests/e2e

  build-and-push:
    needs: checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get tag name
        id: tag_name
        # run: echo "::set-output name=TAG_NAME::$(echo ${GITHUB_REF#refs/tags/})"
        run: echo "::set-output name=TAG_NAME::$(echo ${GITHUB_SHA})"
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: blablatdinov/revive-code-bot:${{ steps.tag_name.outputs.TAG_NAME }}

  # apply-migrations:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.12.1
  #     - name: Install Dependencies
  #       run: |
  #         pip install yoyo-migrations==8.2.0 psycopg2-binary==2.9.9 setuptools==68.2.2
  #     - name: Fill yoyo.ini
  #       run: |
  #         echo '[DEFAULT]
  #         sources = migrations
  #         database = ${{ secrets.POSTGRES_URL }}
  #         batch_mode = on
  #         verbosity = 3' > yoyo.ini
  #     - name: Apply Migrations
  #       run: |
  #         yoyo apply

  # apply-nginx-conf:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Install SSH Key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_KEY}}
  #         known_hosts: '87.249.49.217 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXsftBFh0RQ0pupvfT8zZp7HEIT8cWD9ziL7glOEtCqVWu8mMqgmYH+GzA7xsWHkAGgQ0BHHQinVMg2sQzDyyHdSVuMvsi04WsgAaOdD0mQa5LwauXpaw/X5nyOKAtiVzzUSi6I8leTS+o4/5nnNz+wxGEZSItESEYYbLWIhE9p30Mt1cSB+F8iUXsAO/I1DqwqXsOUET5ocVOfeRd7/3P7ZT8KGjG6DP8D4aCvxnc1NIAVnW9sfj7hsR84kTWNFFfihMZkmFrDuQfS30mFBlb9sAahHmQfeYfVUexU0ntkiSyE7jsnvfKJIKb3uyfbP1TjJ5EwTt7lDgNdZst3aAkK/JHiEJaIyod1AHt5gG8OFC75+Cy7fbwawPJUuRysxz2O35KFGcbZyN42kdHYZoVLpe5GvcziUSkQLW/KRBrbK7Uw4X6Q6h1QOhUL1ifbqACEIZXeuqkje0c6nL9M5lFeYITn1Ikc3N+c50hAmnX6F4rnifbFUnqiELBk0sn7zM='
  #     - name:
  #       run: |
  #         scp deploy/quranbot_nginx.conf www@87.249.49.217:/etc/nginx/sites-enabled/
  #         ssh www@87.249.49.217 'sudo nginx -t && sudo service nginx reload'

  update-remote-container:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY}}
          known_hosts: '87.249.49.217 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXsftBFh0RQ0pupvfT8zZp7HEIT8cWD9ziL7glOEtCqVWu8mMqgmYH+GzA7xsWHkAGgQ0BHHQinVMg2sQzDyyHdSVuMvsi04WsgAaOdD0mQa5LwauXpaw/X5nyOKAtiVzzUSi6I8leTS+o4/5nnNz+wxGEZSItESEYYbLWIhE9p30Mt1cSB+F8iUXsAO/I1DqwqXsOUET5ocVOfeRd7/3P7ZT8KGjG6DP8D4aCvxnc1NIAVnW9sfj7hsR84kTWNFFfihMZkmFrDuQfS30mFBlb9sAahHmQfeYfVUexU0ntkiSyE7jsnvfKJIKb3uyfbP1TjJ5EwTt7lDgNdZst3aAkK/JHiEJaIyod1AHt5gG8OFC75+Cy7fbwawPJUuRysxz2O35KFGcbZyN42kdHYZoVLpe5GvcziUSkQLW/KRBrbK7Uw4X6Q6h1QOhUL1ifbqACEIZXeuqkje0c6nL9M5lFeYITn1Ikc3N+c50hAmnX6F4rnifbFUnqiELBk0sn7zM='
      - name: Get tag name
        id: tag_name
        # run: echo "::set-output name=TAG_NAME::$(echo ${GITHUB_REF#refs/tags/})"
        run: echo "::set-output name=TAG_NAME::$(echo ${GITHUB_SHA})"
      - name: Generate docker-compose.yml
        run: |
          echo 'version: "3.3"
          services:
            revive-code-bot:
              image: blablatdinov/revive-code-bot:${{ steps.tag_name.outputs.TAG_NAME }}
              command: .venv/bin/uvicorn main:app --host 0.0.0.0 --port 8011
              restart: always
              ports:
                - 8011:8011
              env_file:
                - .env
          ' > docker-compose.yml
          cat docker-compose.yml
      - name: Deploy with docker-compose on remote server
        run: |
          ssh www@87.249.49.217 'echo "Connected!"'
          scp docker-compose.yml www@87.249.49.217:/home/www/code/revive-code-bot/docker-compose.yml
          ssh www@87.249.49.217 'cd /home/www/code/revive-code-bot/ && docker-compose up -d'
